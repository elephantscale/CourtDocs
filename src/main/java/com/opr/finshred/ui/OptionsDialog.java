/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.opr.finshred.ui;

import com.opr.finshred.Settings;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.text.SimpleDateFormat;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author mark
 */
public class OptionsDialog extends javax.swing.JDialog {

    Logger logger = LoggerFactory.getLogger(getClass().getName());
    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
    private static final String SAMPLE_TICKERS = "NasdaqGS:GOOG NYSE:IBM NasdaqGS:AAPL\n";
    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new form OptionsDialog
     */
    public OptionsDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        myInit();
        logger.debug("Options dialog initializing");
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formatGroup = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        labelSite = new javax.swing.JLabel();
        siteChoiceCombo = new javax.swing.JComboBox();
        startDateLabel = new javax.swing.JLabel();
        endDateLabel = new javax.swing.JLabel();
        downloadLimitLabel = new javax.swing.JLabel();
        startDateText = new javax.swing.JTextField();
        endDateText = new javax.swing.JTextField();
        downloadLimitText = new javax.swing.JTextField();
        perCompanyLimitLabel = new javax.swing.JLabel();
        perCompanyLimitText = new javax.swing.JTextField();
        tickersLabel = new javax.swing.JLabel();
        downloadDirLabel = new javax.swing.JLabel();
        downloadDirText = new javax.swing.JTextField();
        dirButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tickerList = new javax.swing.JList();
        uploadCheck = new javax.swing.JCheckBox();
        yearLabel = new javax.swing.JLabel();
        yearText = new javax.swing.JTextField();
        pagesLabel = new javax.swing.JLabel();
        pagesText = new javax.swing.JTextField();

        setTitle("Download options");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        labelSite.setText("Site to download");

        siteChoiceCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siteChoiceComboActionPerformed(evt);
            }
        });

        startDateLabel.setLabelFor(startDateText);
        startDateLabel.setText("Doc start date");

        endDateLabel.setLabelFor(endDateText);
        endDateLabel.setText("Doc end date");

        downloadLimitLabel.setText("Total download limit");

        perCompanyLimitLabel.setText("Per-company limit");

        tickersLabel.setText("Tickers (select to download)");

        downloadDirLabel.setText("Firefox download directory");

        dirButton.setText("...");
        dirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dirButtonActionPerformed(evt);
            }
        });

        tickerList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(tickerList);

        uploadCheck.setText("Upload to S3");

        yearLabel.setText("Earliest year to download");

        pagesLabel.setText("Empty pages to stop searching");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelSite)
                                    .addComponent(downloadDirLabel)
                                    .addComponent(perCompanyLimitLabel))
                                .addGap(39, 39, 39)
                                .addComponent(siteChoiceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(downloadDirText)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(dirButton))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(downloadLimitLabel)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(perCompanyLimitText, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(downloadLimitText, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addGap(21, 21, 21))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(endDateLabel)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(endDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(startDateLabel)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(startDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(uploadCheck)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(yearLabel)
                                                    .addComponent(pagesLabel))
                                                .addGap(43, 43, 43)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(yearText, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                                    .addComponent(pagesText))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                            .addComponent(tickersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSite)
                    .addComponent(siteChoiceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tickersLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cancelButton)
                            .addComponent(okButton)
                            .addComponent(uploadCheck))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startDateLabel)
                            .addComponent(startDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endDateLabel))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(downloadLimitLabel)
                            .addComponent(downloadLimitText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(perCompanyLimitText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(perCompanyLimitLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(downloadDirLabel)
                            .addComponent(dirButton))
                        .addGap(24, 24, 24)
                        .addComponent(downloadDirText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(yearLabel)
                            .addComponent(yearText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pagesLabel)
                            .addComponent(pagesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        getRootPane().setDefaultButton(okButton);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (!saveData()) {
            return;
        }
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void dirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dirButtonActionPerformed
        selectDownloadDir();
    }//GEN-LAST:event_dirButtonActionPerformed

    private void siteChoiceComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siteChoiceComboActionPerformed
        collectionTargetChanged();
    }//GEN-LAST:event_siteChoiceComboActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OptionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OptionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OptionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OptionsDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                OptionsDialog dialog = new OptionsDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton dirButton;
    private javax.swing.JLabel downloadDirLabel;
    private javax.swing.JTextField downloadDirText;
    private javax.swing.JLabel downloadLimitLabel;
    private javax.swing.JTextField downloadLimitText;
    private javax.swing.JLabel endDateLabel;
    private javax.swing.JTextField endDateText;
    private javax.swing.ButtonGroup formatGroup;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelSite;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel pagesLabel;
    private javax.swing.JTextField pagesText;
    private javax.swing.JLabel perCompanyLimitLabel;
    private javax.swing.JTextField perCompanyLimitText;
    private javax.swing.JComboBox siteChoiceCombo;
    private javax.swing.JLabel startDateLabel;
    private javax.swing.JTextField startDateText;
    private javax.swing.JList tickerList;
    private javax.swing.JLabel tickersLabel;
    private javax.swing.JCheckBox uploadCheck;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JTextField yearText;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;

    @Override
    public void setVisible(boolean b) {
        if (b) {
            showData();
        }
        super.setVisible(b);
    }

    private void showData() {
        Settings settings = Settings.getSettings();
        siteChoiceCombo.setSelectedItem(settings.getSite());
        downloadLimitText.setText(Integer.toString(settings.getTotalLimit()));
        perCompanyLimitText.setText(Integer.toString(settings.getPerCompanyLimit()));
        tickerList.setListData(settings.getTickers());
        tickerList.setSelectedIndices(settings.getSelectedTickers());
        downloadDirText.setText(settings.getFirefoxDownloadDir());
        uploadCheck.setSelected(settings.isUploadToS3());
        yearText.setText(Integer.toString(settings.getEarliestYear()));
        int emptyPages = settings.getEmptyPagesToStop();
        if (emptyPages > 0) {
            pagesText.setText(Integer.toString(emptyPages));
        }
    }

    private boolean saveData() {
        try {
            Settings settings = Settings.getSettings();
            settings.setSiteAndReadTickers(siteChoiceCombo.getSelectedItem().toString());
            settings.setTotalLimit(Integer.parseInt(downloadLimitText.getText().trim()));
            settings.setPerCompanyLimit(Integer.parseInt(perCompanyLimitText.getText().trim()));
            settings.setSelectedTickers(tickerList.getSelectedIndices());
            String downloadDir = downloadDirText.getText().trim();
            if (downloadDir.isEmpty() || !new File(downloadDir).exists()) {
                JOptionPane.showMessageDialog(rootPane, "Please set Firefox download directory");
                return false;
            }
            settings.setFirefoxDownloadDir(downloadDir);
            settings.setEarliestYear(Integer.parseInt(yearText.getText()));
            String text = pagesText.getText().trim();
            if (!text.isEmpty()) {
                settings.setEmptyPagesToStop(Integer.parseInt(text));
            } else {
                settings.setEmptyPagesToStop(0);
            }
            settings.setUploadToS3(uploadCheck.isSelected());
        } catch (NumberFormatException | HeadlessException e) {
            logger.debug("Error saving options", e);
            JOptionPane.showMessageDialog(rootPane, "Please enter parameters in correct format");
            return false;
        }
        return true;
    }

    private void myInit() {
        siteChoiceCombo.setModel(new DefaultComboBoxModel(new String[]{
            Settings.SITES.CapitalIQ.toString(), Settings.SITES.JPMorgan.toString(), 
            Settings.SITES.Zacks.toString()}));
    }

    private void selectDownloadDir() {
        Settings settings = Settings.getSettings();
        JFileChooser dlg = new JFileChooser(settings.getFirefoxDownloadDir());
        dlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = dlg.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String dir = dlg.getSelectedFile().getPath();
            logger.debug("Changing download dir to {}", dir);
            settings.setFirefoxDownloadDir(dir);
            downloadDirText.setText(dir);
        }
    }

    private void collectionTargetChanged() {
        logger.debug("Site changed {}", siteChoiceCombo.getSelectedItem());
        Settings settings = Settings.getSettings();
        settings.setSiteAndReadTickers((String) siteChoiceCombo.getSelectedItem());
        tickerList.setListData(settings.getTickers());
    }
}
